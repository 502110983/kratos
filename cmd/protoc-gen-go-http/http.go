package main

import (
	"fmt"
	"strings"

	annotations "github.com/go-kratos/kratos/v2/api/google/api"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	httpPackage    = protogen.GoImportPath("github.com/go-kratos/kratos/v2/transport/http")
)

// generateFile generates a _http.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_http.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-http. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kratos package it is being compiled against.")
	g.P("// ", contextPackage.Ident("Context"))
	g.P("const _ = ", httpPackage.Ident("SupportPackageIsVersion1"))
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// Server interface.
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}
	for _, m := range service.Methods {
		var (
			path         string
			method       string
			body         string
			responseBody string
		)
		rule, ok := proto.GetExtension(m.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if ok {
			switch pattern := rule.Pattern.(type) {
			case *annotations.HttpRule_Get:
				path = pattern.Get
				method = "GET"
			case *annotations.HttpRule_Put:
				path = pattern.Put
				method = "PUT"
			case *annotations.HttpRule_Post:
				path = pattern.Post
				method = "POST"
			case *annotations.HttpRule_Delete:
				path = pattern.Delete
				method = "DELETE"
			case *annotations.HttpRule_Patch:
				path = pattern.Patch
				method = "PATCH"
			case *annotations.HttpRule_Custom:
				path = pattern.Custom.Path
				method = pattern.Custom.Kind
			}
			body = rule.Body
			responseBody = rule.ResponseBody
		} else {
			path = fmt.Sprintf("/%s/%s", service.Desc.FullName(), m.Desc.Name())
			method = "POST"
		}
		m := &methodDesc{
			// service
			ServiceType: sd.ServiceType,
			// method
			Name:    m.GoName,
			Request: m.Input.GoIdent.GoName,
			Reply:   m.Output.GoIdent.GoName,
			// http_rule
			Path:         path,
			Method:       method,
			Body:         body,
			ResponseBody: responseBody,
		}
		sd.Methods = append(sd.Methods, m)
	}
	g.P(sd.execute())
}

const deprecationComment = "// Deprecated: Do not use."

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
